#include<iostream>
using namespace std;

class Node{
public:
    int data;
    Node* next;
    
    Node(int val){
        data = val;
        next = NULL;
    }
};

class LinkedList {
private:
    Node* head;
    Node* tail;
    
public:
    LinkedList() {
        head = NULL;
        tail = NULL;
    }

    // Destructor to delete all nodes and free memory
    ~LinkedList() {
        Node* temp;
        while (head != NULL) {
            temp = head;
            head = head->next;
            delete temp;
        }
        cout << "List has been destroyed and memory freed." << endl;
    }

    void InsertAt_Head(int d) {
        Node* temp = new Node(d);
        temp->next = head;
        head = temp;
        if (tail == NULL) {
            tail = head;
        }
    }

    void InsertAt_Tail(int d) {
        Node* temp = new Node(d);
        if (tail == NULL) {
            head = tail = temp;
        } else {
            tail->next = temp;
            tail = temp;
        }
    }

    void InsertAt_Position(int position, int d) {
        if (position == 1) {
            InsertAt_Head(d);
            return;
        }

        Node* temp = head;
        int cnt = 1;

        while(cnt < position - 1 && temp->next != NULL) {
            temp = temp->next;
            cnt++;
        }

        Node* nodetoInsert = new Node(d);
        nodetoInsert->next = temp->next;
        temp->next = nodetoInsert;

        if (nodetoInsert->next == NULL) {
            tail = nodetoInsert;
        }
    }

    void deleteNode(int position) {
        if(position == 1) {
            Node* temp = head;
            head = head->next;
            temp->next = NULL;
            delete temp;
            if (head == NULL) {
                tail = NULL;
            }
        } else {
            Node* curr = head;
            Node* prev = NULL;

            int cnt = 1;
            while(cnt < position) {
                prev = curr;
                curr = curr->next;
                cnt++;
            }

            prev->next = curr->next;
            if (curr->next == NULL) {
                tail = prev;
            }
            curr->next = NULL;
            delete curr;
        }
    }

    void Print() {
        Node* temp = head;
        while(temp != NULL) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main() {
    LinkedList list;

    list.InsertAt_Head(10);
    list.InsertAt_Head(11);
    list.InsertAt_Head(12);

    list.InsertAt_Position(1, 15);

    cout << "Linked List: ";
    list.Print();

    list.deleteNode(3);
    
    cout << "After deletion: ";
    list.Print();

    return 0;
}
