#include <iostream>
using namespace std;

struct Employee {
    int empID;
    string empName;
    int empSalary;
};

// Function to swap two Employee structures
void swap(Employee *a, Employee *b) {
    Employee temp = *a;
    *a = *b;
    *b = temp;
}

// Partition function for QuickSort
int partition(Employee arr[], int low, int high) {
    int pivot = arr[high].empID; // Pivot
    int i = (low - 1); // Index of smaller element

    for (int j = low; j <= high - 1; j++) {
        if (arr[j].empID <= pivot) {
            i++; // Increment index of smaller element
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

// QuickSort function
void quickSort(Employee arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);

        quickSort(arr, low, pi - 1); // Before pi
        quickSort(arr, pi + 1, high); // After pi
    }
}

// Function to display the Employee array
void display(Employee arr[], int size) {
    for (int i = 0; i < size; i++) {
        cout << "EMP-ID: " << arr[i].empID << ", "
             << "EMP-Name: " << arr[i].empName << ", "
             << "EMP-Salary: " << arr[i].empSalary << endl;
    }
}

int main() {
    int n;
    Employee* employees = nullptr;
    int choice;

    do {
        cout << "\nMenu:\n";
        cout << "1. Enter employee data\n";
        cout << "2. Sort and display employees by EMP-ID\n";
        cout << "3. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice){
            case 1:
                // Get the number of employees from the user
                cout << "Enter the number of employees: ";
                cin >> n;

                // Dynamically allocate memory for 'n' employees
                employees = new Employee[n];

                // Get details for each employee
                for (int i = 0; i < n; i++) {
                    cout << "Enter details for employee " << i + 1 << ":\n";
                    cout << "EMP-ID: ";
                    cin >> employees[i].empID;
                    cout << "EMP-Name: ";
                    cin >> employees[i].empName;
                    cout << "EMP-Salary: ";
                    cin >> employees[i].empSalary;
                    
       do {
            cout << "\nMenu:\n";
           cout << "1. Enter employee data\n";
           cout << "2. Sort and display employees by EMP-ID\n";
            cout << "3. Exit\n";
            cout << "Enter your choice: ";
            cin >> choice;
            
             switch (choice){
            case 1:
                // Get the number of employees from the user
                cout << "Enter the number of employees: ";
                cin >> n;

                // Dynamically allocate memory for 'n' employees
                employees = new Employee[n];

                // Get details for each employee
                for (int i = 0; i < n; i++) {
                    cout << "Enter details for employee " << i + 1 << ":\n";
                    cout << "EMP-ID: ";
                    cin >> employees[i].empID;
                    cout << "EMP-Name: ";
                    cin >> employees[i].empName;
                    cout << "EMP-Salary: ";
                    cin >> employees[i].empSalary;
                    
       do {
            cout << "\nMenu:\n";
           cout << "1. Enter employee data\n";
           cout << "2. Sort and display employees by EMP-ID\n";
            cout << "3. Exit\n";
            cout << "Enter your choice: ";
            cin >> choice;
            
       }
            
             while (choice != 3);

                }
                break;

            case 2:
                if (employees != nullptr) {
                    // Sort employees by EMP-ID using QuickSort
                    quickSort(employees, 0, n - 1);

                    // Display sorted employees
                    cout << "Employees sorted by EMP-ID:\n";
                    display(employees, n);
                } else {
                    cout << "No employee data available. Please enter employee data first.\n";
                }
                break;

            case 3:
                cout << "Exiting program.\n";
                break;

            default:
                cout << "Invalid choice. Please try again.\n";
                break;
        }
    }
            
       }
            
             while (choice != 3);

                }
                break;

            case 2:
                if (employees != nullptr) {
                    // Sort employees by EMP-ID using QuickSort
                    quickSort(employees, 0, n - 1);

                    // Display sorted employees
                    cout << "Employees sorted by EMP-ID:\n";
                    display(employees, n);
                } else {
                    cout << "No employee data available. Please enter employee data first.\n";
                }
                break;

            case 3:
                cout << "Exiting program.\n";
                break;

            default:
                cout << "Invalid choice. Please try again.\n";
                break;
        }
    } while (choice != 3);

    // Free dynamically allocated memory
    delete[] employees;

    return 0;
}

