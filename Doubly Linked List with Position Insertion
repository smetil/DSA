#include<iostream>
using namespace std;

class Node {
public:
    int data;
    Node* prev;
    Node* next;

    Node(int d) {
        this->data = d;
        this->prev = NULL;
        this->next = NULL;
    }
};

void InsertAt_Head(Node*& head, Node*& tail, int d) {
    Node* temp = new Node(d);
    temp->next = head;
    if (head != NULL) {
        head->prev = temp;
    } else {
        tail = temp; // If the list is empty, update the tail as well
    }
    head = temp;
}

void InsertAt_Tail(Node*& head, Node*& tail, int d) {
    Node* temp = new Node(d);
    if (tail != NULL) {
        tail->next = temp;
        temp->prev = tail;
        tail = temp;
    } else {
        head = temp; // If the list is empty, update the head as well
        tail = temp;
    }
}

void InsertAt_Position(Node*& head, Node*& tail, int position, int d) {
    if (position == 1) {
        InsertAt_Head(head, tail, d);
        return;
    }

    Node* temp = head;
    int cnt = 1;

    // Traverse to the node before the insertion position
    while (cnt < position - 1 && temp != NULL) {
        temp = temp->next;
        cnt++;
    }

    // If reached the end, insert at the tail
    if (temp == NULL || temp->next == NULL) {
        InsertAt_Tail(head, tail, d);
    } else {
        Node* nodetoInsert = new Node(d);
        nodetoInsert->next = temp->next;
        nodetoInsert->prev = temp;
        
        if (temp->next != NULL) {
            temp->next->prev = nodetoInsert;
        }
        
        temp->next = nodetoInsert;
    }
}

void print(Node* head) {
    Node* temp = head;
    while (temp != NULL) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

int getLength(Node* head) {
    int length = 0;
    Node* temp = head;
    
    while (temp != NULL) {
        length++;
        temp = temp->next;
    }
    return length;
}

int main() {
    Node* head = NULL;
    Node* tail = NULL;

    InsertAt_Tail(head, tail, 10);
    InsertAt_Tail(head, tail, 11);
    InsertAt_Head(head, tail, 5);

    InsertAt_Position(head, tail, 2, 8); // Insert 8 at position 2
    
    print(head);
    
    cout << "Length of the list: " << getLength(head) << endl;

    return 0;
}
