#include <iostream>
using namespace std;

struct Employee {
    int empID;
    string empName;
    int empSalary;
};


void swap(Employee *a, Employee *b) {
    Employee temp = *a;
    *a = *b;
    *b = temp;
}

// Partition function for QuickSort
int partition(Employee arr[], int low, int high) {
    int pivot = arr[high].empID; // Pivot
    int i = (low - 1); // Index of smaller element

    for (int j = low; j <= high - 1; j++) {
        // If current element is smaller than or equal to pivot
        if (arr[j].empID <= pivot) {
            i++; // Increment index of smaller element
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

// QuickSort function
void quickSort(Employee arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);

        quickSort(arr, low, pi - 1); // Before pi
        quickSort(arr, pi + 1, high); // After pi
    }
}


void display(Employee arr[], int size) {
    for (int i = 0; i < size; i++) {
        cout << "EMP-ID: " << arr[i].empID << ", "
                  << "EMP-Name: " << arr[i].empName << ", "
                  << "EMP-Salary: " << arr[i].empSalary << std::endl;
    }
}

int main() {
    int n;
    cout << "Enter the number of employees: ";
    cin >> n;

   
    Employee *employees = new Employee[n];

   
    for (int i = 0; i < n; i++) {
        cout << "Enter details for employee " << i + 1 << ":\n";
        cout << "EMP-ID: ";
        cin >> employees[i].empID;
        cout << "EMP-Name: ";
        cin >> employees[i].empName;
        cout << "EMP-Salary: ";
        cin >> employees[i].empSalary;
    }

    
    quickSort(employees, 0, n - 1);

    // Display sorted employees
    cout << "Employees sorted by EMP-ID :";
    display(employees, n);

   
    delete[] employees;

    return 0;
}
