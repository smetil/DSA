#include <iostream>
using namespace std;

// Node class
class Node {
public:
    int data;
    Node* next;

    Node(int data) {
        this->data = data;
        this->next = nullptr;
    }
};

// LinkedList class
class LinkedList {
private:
    Node* head;

public:
    LinkedList() {
        head = nullptr;
    }

    // Function to append a new node at the end
    void append(int new_data) {
        Node* new_node = new Node(new_data);
        if (head == nullptr) {
            head = new_node;
            return;
        }
        Node* last = head;
        while (last->next != nullptr) {
            last = last->next;
        }
        last->next = new_node;
    }

    // Function to delete a node from the head
    void delete_head() {
        if (head == nullptr) {
            cout << "List is empty, nothing to delete." << endl;
            return;
        }
        Node* temp = head;
        head = head->next;
        delete temp;
    }

    // Function to print the linked list
    void print_list() {
        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->data << " -> ";
            temp = temp->next;
        }
        cout << "None" << endl;
    }
};

int main() {
    LinkedList llist;

    llist.append(1);
    llist.append(2);
    llist.append(3);
    llist.append(4);

    cout << "Original list:" << endl;
    llist.print_list();

    llist.delete_head();

    cout << "List after deleting head:" << endl;
    llist.print_list();
    
     llist.delete_head();

 cout << "List after deleting head:" << endl;
    llist.print_list();
    
    return 0;
}
